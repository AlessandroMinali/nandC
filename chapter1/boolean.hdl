/**
* Not gate:
* if (in) out = 0, else out = 1
*/
CHIP Not {
    IN in;
    OUT out;

    PARTS:
    Nand(a= in, b= in, out= out);
}

/**
* And gate:
* if (a and b) out = 1, else out = 0
*/
CHIP And {
    IN a, b;
    OUT out;

    PARTS:
    Nand(a= a, b= b, out= o);
    Not(in= o, out= out);
}

/**
* Or gate:
* if (a or b) out = 1, else out = 0
*/
CHIP Or {
    IN a, b;
    OUT out;

    PARTS:
    Not(in= a, out= na);
    Not(in= b, out= nb);
    And(a= na, b= nb, out= nanb);
    Not(in= nanb, out= out);
}

/**
* Exclusive-or gate:
* if ((a and Not(b)) or (Not(a) and b)) out = 1, else out = 0
*/
CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    Not(in= a, out= na);
    Not(in= b, out= nb);
    And(a= a, b= nb, out= ls);
    And(a= na, b= b, out= rs);
    Or(a= ls, b= rs, out= out);
}

/**
* Multiplexor:
* if (sel = 0) out = a, else out = b
*/
CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    Not(in= sel, out= ns);
    And(a= ns, b= a, out= ls);
    And(a= sel, b= b, out= rs);
    Or(a= ls, b= rs, out= out);
}

/**
* Demultiplexor:
* [a, b] = [in, 0] if sel = 0
* [0, in] if sel = 1
*/
CHIP DMux {
    IN in, sel;
    OUT a, b;

    PARTS:
    Not(in= sel, out= ns);
    And(a= in, b= ns, out= a);
    And(a= in, b= sel, out= b);
}

/**
* 16-bit Not gate:
* for i = 0, ..., 15:
* out[i] = Not(a[i])
*/
CHIP Not16 {
    IN in[16];
    OUT out[16];

    PARTS:
    Not(in= in[0], out= out[0]);
    Not(in= in[1], out= out[1]);
    Not(in= in[2], out= out[2]);
    Not(in= in[3], out= out[3]);
    Not(in= in[4], out= out[4]);
    Not(in= in[5], out= out[5]);
    Not(in= in[6], out= out[6]);
    Not(in= in[7], out= out[7]);
    Not(in= in[8], out= out[8]);
    Not(in= in[9], out= out[9]);
    Not(in= in[10], out= out[10]);
    Not(in= in[11], out= out[11]);
    Not(in= in[12], out= out[12]);
    Not(in= in[13], out= out[13]);
    Not(in= in[14], out= out[14]);
    Not(in= in[15], out= out[15]);
}

/**
* 16-bit And gate:
* for i = 0, ..., 15:
* out[i] = And(a[i])
*/
CHIP And16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    And(a= a[0], b= b[0], out= out[0]);
    And(a= a[1], b= b[1], out= out[1]);
    And(a= a[2], b= b[2], out= out[2]);
    And(a= a[3], b= b[3], out= out[3]);
    And(a= a[4], b= b[4], out= out[4]);
    And(a= a[5], b= b[5], out= out[5]);
    And(a= a[6], b= b[6], out= out[6]);
    And(a= a[7], b= b[7], out= out[7]);
    And(a= a[8], b= b[8], out= out[8]);
    And(a= a[9], b= b[9], out= out[9]);
    And(a= a[10], b= b[10], out= out[10]);
    And(a= a[11], b= b[11], out= out[11]);
    And(a= a[12], b= b[12], out= out[12]);
    And(a= a[13], b= b[13], out= out[13]);
    And(a= a[14], b= b[14], out= out[14]);
    And(a= a[15], b= b[15], out= out[15]);
}

/**
 * 16-bit Or gate:
 * for i = 0, ..., 15:
 * out[i] = a[i] Or b[i]
 */
CHIP Or16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    Or(a= a[0], b= b[0], out= out[0]);
    Or(a= a[1], b= b[1], out= out[1]);
    Or(a= a[2], b= b[2], out= out[2]);
    Or(a= a[3], b= b[3], out= out[3]);
    Or(a= a[4], b= b[4], out= out[4]);
    Or(a= a[5], b= b[5], out= out[5]);
    Or(a= a[6], b= b[6], out= out[6]);
    Or(a= a[7], b= b[7], out= out[7]);
    Or(a= a[8], b= b[8], out= out[8]);
    Or(a= a[9], b= b[9], out= out[9]);
    Or(a= a[10], b= b[10], out= out[10]);
    Or(a= a[11], b= b[11], out= out[11]);
    Or(a= a[12], b= b[12], out= out[12]);
    Or(a= a[13], b= b[13], out= out[13]);
    Or(a= a[14], b= b[14], out= out[14]);
    Or(a= a[15], b= b[15], out= out[15]);
}

/**
 * 16-bit multiplexor:
 * for i = 0, ..., 15:
 * if (sel = 0) out[i] = a[i], else out[i] = b[i]
 */
CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];

    PARTS:
    Mux(a= a[0], b= b[0], sel= sel, out= out[0]);
    Mux(a= a[1], b= b[1], sel= sel, out= out[1]);
    Mux(a= a[2], b= b[2], sel= sel, out= out[2]);
    Mux(a= a[3], b= b[3], sel= sel, out= out[3]);
    Mux(a= a[4], b= b[4], sel= sel, out= out[4]);
    Mux(a= a[5], b= b[5], sel= sel, out= out[5]);
    Mux(a= a[6], b= b[6], sel= sel, out= out[6]);
    Mux(a= a[7], b= b[7], sel= sel, out= out[7]);
    Mux(a= a[8], b= b[8], sel= sel, out= out[8]);
    Mux(a= a[9], b= b[9], sel= sel, out= out[9]);
    Mux(a= a[10], b= b[10], sel= sel, out= out[10]);
    Mux(a= a[11], b= b[11], sel= sel, out= out[11]);
    Mux(a= a[12], b= b[12], sel= sel, out= out[12]);
    Mux(a= a[13], b= b[13], sel= sel, out= out[13]);
    Mux(a= a[14], b= b[14], sel= sel, out= out[14]);
    Mux(a= a[15], b= b[15], sel= sel, out= out[15]);
}

/**
 * 8-way Or gate:
 * out = in[0] Or in[1] Or ... Or in[7]
 */
CHIP Or8Way {
    IN in[8];
    OUT out;

    PARTS:
    Or(a= in[0], b= in[1], out= in1);
    Or(a= in[2], b= in[3], out= in2);
    Or(a= in[4], b= in[5], out= in3);
    Or(a= in[6], b= in[7], out= in4);
    Or(a= in1, b= in2, out= in12);
    Or(a= in3, b= in4, out= in34);
    Or(a= in12, b= in34, out= out);
}

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel = 00
 *       b if sel = 01
 *       c if sel = 10
 *       d if sel = 11
 */
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Mux16(a= a, b= b, sel= sel[0], out= m1);
    Mux16(a= c, b= d, sel= sel[0], out= m2);
    Mux16(a= m1, b= m2, sel= sel[1], out= out);
}

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel = 000
 *       b if sel = 001
 *       c if sel = 010
 *       d if sel = 011
 *       e if sel = 100
 *       f if sel = 101
 *       g if sel = 110
 *       h if sel = 111
 */
CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux4Way16(a= a, b= b, c= c, d= d, sel= sel[0..1], out= m1);
    Mux4Way16(a= e, b= f, c= g, d= h, sel= sel[0..1], out= m2);
    Mux16(a= m1, b= m2, sel= sel[2], out= out);
}

/**
 * 4-way demultiplexor:
 * [a, b, c, d] = [in, 0, 0, 0] if sel = 00
 *                [0, in, 0, 0] if sel = 01
 *                [0, 0, in, 0] if sel = 10
 *                [0, 0, 0, in] if sel = 11
 */
CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    DMux(in= in, sel= sel[1], a= _a, b= _b);
    DMux(in= _a, sel= sel[0], a= a, b= b);
    DMux(in= _b, sel= sel[0], a= c, b= d);
}

/**
 * 8-way demultiplexor:
 * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000
 *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001
 *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010
 *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011
 *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100
 *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101
 *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110
 *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111
 */
CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    DMux(in= in, sel= sel[2], a= _a, b= _b);
    DMux4Way(in= _a, sel= sel[0..1], a= a, b= b, c= c, d= d);
    DMux4Way(in= _b, sel= sel[0..1], a= e, b= f, c= g, d= h);
}



